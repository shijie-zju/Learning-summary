# python中的正则表达式

Python中的正则表达式（Regular Expression）是一种强大的文本处理工具，可以匹配、搜索、替换或拆分复杂的字符串模式。以下是一些常见的Python正则表达式：

1. 匹配特定字符：

.：匹配任何字符（除了换行符）。
^：匹配输入字符串的开始。
$：匹配输入字符串的结束。
\d：匹配任何数字，等同于 [0-9]。
\D：匹配任何非数字字符，等同于 [^0-9]。
\s：匹配任何空白字符（包括空格、制表符、换页符等）。
\S：匹配任何非空白字符。
\w：匹配任何字母或数字或下划线，等同于 [a-zA-Z0-9_]。
\W：匹配任何非字母、非数字和非下划线的字符，等同于 [^a-zA-Z0-9_]。

2. 重复字符：

*：匹配前面的子表达式零次或多次。
+：匹配前面的子表达式一次或多次。
?：匹配前面的子表达式零次或一次。
{n}：n是一个非负整数。匹配确定的 n 次。
{n,}：n 是一个非负整数。至少匹配 n 次。
{n,m}：m 和 n 均为非负整数。最少匹配 n 次且最多匹配 m 次。

3. 选择、分组和引用：

|：表示或者，比如 a|b 匹配 'a' 或 'b'。
( )：将几个项组合为一个单元，例如 (abc) 与 abc 匹配相同的内容。捕获的内容可以由 \1,\2,\3... 等进行引用。
\：转义特殊字符，例如 \() 表示匹配真实的“(”字符，而不是作为分组符。

4. 预定义模式：

\d+ 或 \D+：匹配一个或多个数字或非数字字符。
\s+ 或 \S+：匹配一个或多个空白或非空白字符。
.：在 re 模块中，. 不能直接使用，因为它被视为一个特殊字符。如果要匹配任意字符（包括换行符），可以使用诸如 [\s\S] 或 [^\s] 的模式。

5. 边界条件：

^：在方括号外面表示否定，也可以表示字符串的开始。在方括号内表示非负整数，例如，[0-9]^ 表示以0开头的一串数字。
$：表示字符串的结束，也可以表示美元符号。在方括号内表示负整数，例如，[-1]^ 表示以-1结尾的一串数字。
贪婪与非贪婪匹配：

默认情况下，正则表达式是贪婪的，即它们尽可能多地匹配（只要还能符合其他要求）。可以使用 ? 来使正则表达式变为非贪婪的（尽可能少地匹配）。例如，在查找所有以 "a" 开头的单词时，"a*" 将匹配尽可能多的 "a" 字符，"a*?" 则将只匹配最少的 "a" 字符以满足条件。